//ДОМАШКА
/*
1. Изучить теорию
2. Какой или какие из вариантов не верны:
*/

/*

//Вариант №1
console.log('35' + - "22");
//Вернет 13

*/

/*


//Вариант №2
console.log('35' * "22");
//Вернет 770

*/

/*

//Вариант №3
console.log('558' > 22++);
//Вернет true

*/

/*

//Вариант №4
let usersCounter = 0;
let newUsers = usersCounter++;
console.log(newUsers);
//Вернет 1

*/

/*

//Вариант №5
console.log(!false && 11 || 18 && !'');
//Вернет 18

*/

/*

//Вариант №6
let name = 0;
console.log(name ?? "Без имени")


*/



/*

// №_1
 False - ("35" + -'22'): Сначала выполнится унарный оператор " - " для строки "22", 
 после чего строка "22" преобразуется в число и ей присвоется значение -22(number).
 И так как в выражении имеется, ещё один операнд с типом "String"(строка), то "35"(string) + -22(number) = "35-22"
// №_2
 True - Вернёт значение 770(number). Математические операторы в JS (кроме "+" для строк), будут преобразовывать операнды в число.
// №_3
 False - Произойдёт ошибка. Так как оператор инкремента, применяется только к переменным.
// №_4
 False - Вернёт число 0. В присвоении значения: (newUsers = usersCounter++) - применяется постфиксная форма инкремента, поэтому значение будет являтся первоночальным - 0. 
// №_5
 False - Вернёт 11. Первое выражение: !false && 11 = 11(оператор && возвращает последнюю истину). Второе: 18 && !"" = true.
 Итог: 11 || true = 11. Оператор ( || ) возвращает  первую истину(11).
// №_6
 True - Выведет в консоль - 0. Оператор (??) проверяет операнды на значения: null и undefined. 
 Если бы в переменной "name" было одно из этих значений(null, undefined), то вывелась бы строка "Без имени".

 */